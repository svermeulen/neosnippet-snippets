# Structure
snippet namespace
alias   name
abbr    namespace {}
options head
    namespace ${1:#:Name}
    {
        ${0:TARGET}
    }

snippet class
alias   pcl
    class ${1:#:Name}
    {
        ${0:TARGET}
    }

snippet struct
abbr    struct {}
    struct ${1:#:Name} ${2::} ${3:Interface}
    {
        ${0:TARGET}
    }

snippet interface
abbr    interface {}
    interface ${1:#:IName} ${2::} ${3:Parent}
    {
        ${0:TARGET}
    }

snippet public interface
alias pin
    public interface ${1:#:IName}
    {
        ${0:TARGET}
    }

snippet public_method
alias pme
    public ${2:void} ${1:#:Method}()
    {
    }

snippet method
alias me
    public ${2:void} ${1:#:Method}()
    {
    }

snippet enum
abbr    enum {}
    enum ${1:#:Name}
    {
        ${0:TARGET}
    }


# Declare
snippet get
abbr    get {}
    get
    {
        ${1:TARGET}
    }

snippet set
abbr    set {}
    set
    {
        ${1:TARGET}
    }


# PreProcess Syntax
snippet define
alias   def
options head
    #define ${0:#:SYMBOL}

snippet undef
alias   und
options head
    #undef ${0:#:SYMBOL}

snippet ifdef
options head
    #if ${1:SYMBOL}
        ${0:TARGET}
    #endif

# Syntax
snippet if
abbr    if () {}
    if (${1:#:condition})
    {
        ${0:TARGET}
    }

snippet elseif
alias   elif
abbr    else if () {}
    else if (${1:#:condition})
    {
        ${0:TARGET}
    }

snippet else
alias   els, el, else
    else
    {
        ${0:TARGET}
    }

snippet ifelse
alias   ifel
abbr    if () {} else {}
    if (${1:#:condition})
    {
        ${2:TARGET}
    }
    else
    {
        ${3:TARGET}
    }

snippet while
abbr    while () {}
    while (${1:#:condition})
    {
        ${0:TARGET}
    }

snippet do_while
alias   dowhile
abbr    do {} while() {}
    do
    {
        ${0:TARGET}
    }
    while (${1:#:condition});

snippet for
abbr    for () {}
    for (int ${1} = 0; $1 < ${2:#:max}; $1++)
    {
    }

snippet foreach
alias   fore fe
abbr    foreach () {}
    foreach (var ${1:item} in ${2:#:iter})
    {
    }

snippet switch
abbr    switch () {}
    switch (${1:#:var})
    {
        case ${2:#:val}:
        {
            ${0:TARGET};
            break;
        }
    }

snippet case
options head
    case ${1:#:val}:
        ${0:TARGET}
        break;

snippet break
options head
    break;

snippet goto
options head
    goto case ${1:#:Val};

snippet default
options head
    default:
        ${0:TARGET}
        break;

snippet try_without_catch_nor_finally
alias   try_n
options head
    try
    {
        ${0:TARGET}
    }

snippet try_catch
alias   try
abbr    try {} catch () {}
options head
    try
    {
        ${0:TARGET}
    }
    catch (${1:Exception} ${2:e})
    {
        ${3:Console.WriteLine(e.Message);}
    }

snippet try_catch_n
alias   try_cn
abbr    try {} catch {}
options head
    try
    {
        ${0:TARGET}
    }
    catch
    {
        ${1}
    }

snippet try_catch_finally
alias   try_cf
abbr    try {} catch () {} finally {}
options head
    try
    {
        ${0:TARGET}
    }
    catch (${1:Exception} ${2:e})
    {
        ${3:Console.WriteLine(e.Message);}
    }
    finally
    {
        ${4}
    }

snippet try_finally
alias   try_f
abbr    try {} finally {}
options head
    try
    {
        ${0:TARGET}
    }
    finally
    {
        ${1}
    }

snippet try_catch_n_finally
alias   try_cnf
abbr    try {} catch {} finally {}
options head
    try
    {
        ${0:TARGET}
    }
    catch
    {
        ${1}
    }
    finally
    {
        ${2}
    }

snippet catch
abbr    catch () {}
    catch (${1:Exception} ${2:e})
    {
        ${0:Console.WriteLine(e.Message);}
    }

snippet catch_n
abbr    catch {}
    catch
    {
        ${0}
    }

snippet finally
alias   fin
abbr    finally {}
    finally
    {
        ${0:TARGET}
    }

snippet throw
options head
    throw ${0:#:exception}

snippet lock
abbr    lock () {}
options head
    lock (${1:#:resource})
    {
        ${0:TARGET}
    }

snippet using_resource
alias   using resource
abbr    using () {}
options head
    using (${1:#:resource})
    {
        ${0:TARGET}
    }

snippet checked
abbr    checked () {}
options head
    checked (${1:#:var})
    {
        ${0:TARGET}
    }

snippet unchecked
abbr    unchecked () {}
options head
    unchecked (${1:#:var})
    {
        ${0:TARGET}
    }

snippet unsafe
abbr    unsafe {}
options head
    unsafe
    {
        ${0:TARGET}
    }

snippet fixed
abbr    fixed () {}
options head
    fixed (${1:#:type}* ${2:#:var} = ${3:#:adress})
    {
        ${0:TARGET}
    }

snippet using_import
alias   import
options head
    using ${1:#:path};

snippet using_typedef
alias   typedef
options head
    using ${1:Name} = ${2:Type};


# Import Path
snippet s.l
    System.Linq

snippet s.c.g
    System.Collections.Generic

snippet s.t
    System.Text

snippet s.i
    System.IO

snippet s.d
    System.Diagnostics

snippet s.r.c
    System.Runtie.CompilerServices

snippet s.w.f
    System.Windows.Forms


# Attribute
snippet serializable
alias   serial
options head
    [SerializableAttribute]

snippet conditional
alias   cond
options head
    [Conditional("${1:#:SYMBOL}")]

snippet obsolete
alias   obs dep deprecated
options head
    [Obsolete("${1:#:description}")]

snippet asm_internals_visible_to
alias   internals asmInternalsVisibleTo friend_attr
options head
    [assembly: InternalsVisibleTo("${1:#:FriendName}")]


# Other
snippet main
options head
    public static void Main(string[] args)
    {
        ${0}
    }

snippet writeline
alias   println p
options head
    Console.WriteLine(${1:#:message});

snippet write
alias   print
options head
    Console.Write(${1:#:message});

snippet helloworld
options head
    public class ${1:Hello}
    {
        public static void Main(string[] args)
        {
            System.Console.WriteLine("Hello, world!");
        }
    }


# NUnit
snippet testclass
alias   tc
options head
    [TestFixture]
    public class ${1}Test
    {
        ${0:TARGET}
    }

snippet testsetup
alias   tsu
options head
    [SetUp]
    public void SetUp()
    {
        ${0:TARGET}
    }

snippet testteardown
alias   ttd
options head
    [TearDown]
    public void TearDown()
    {
        ${0:TARGET}
    }

snippet test
options head
    [Test]
    public void ${1:#:Name}Test()
    {
        ${0:TARGET}
    }

snippet category
options head
    [Category("${0:#:category}")]

# Steve Custom

snippet yield_return_null
alias    yrn
    yield return null;

snippet yield_break
alias    yb
    yield break;

snippet yield_return
alias    yr
    yield return ${0};

snippet property_public
alias   pp
    public ${1:int} ${2:#:Name}
    {
        get;
        set;
    }

snippet property_private
alias   pr
    ${1:int} ${2:#:Name}
    {
        get${3:};
        set${4:};
    }

snippet     console_out
abbr        out
options     head
    Console.WriteLine(${1:"${2\}"});

# Project specific

snippet eventmgr_add
alias    ema
    _eventManager.Add(${0});

snippet eventmgr_remove
alias    emr
    _eventManager.Remove(${0});

snippet     output_to_consolee
alias        out
options     head
    Console.WriteLine(${1:"${2\}"});

snippet     return
alias        re
options     head
    return ${1}

snippet     return_false
alias        rf
options     head
    return false;

snippet     return_true
alias        rt
options     head
    return true;

snippet     return_0
alias        r0
options     head
    return 0;

snippet     return_null
alias        rn
options     head
    return null;

snippet     debug_log
alias        dl
options     head
    Debug.Log(${1:"${2\}"});

snippet     debug_log_error
alias        dle
options     head
    Debug.LogError(${1:"${2\}"});

snippet     log
alias        lg
options     head
    Log.Info(${1:"${2\}"});

snippet     log_warn
alias        lgw
options     head
    Log.Warn(${1:"${2\}"});

snippet     log_error
alias        lge
options     head
    Log.Error(${1:"${2\}"});

snippet     log_trace
alias        lgt
options     head
    Log.Trace(${1:"${2\}"});

snippet     log_debug
alias        lgd
options     head
    Log.Debug(${1:"${2\}"});

snippet     event_public
alias       pev
options     head
    public event Action ${0} = delegate {};

snippet     event
alias       ev
options     head
    event Action ${0} = delegate {};

snippet     delegate
alias        del
options     head
    delegate { ${0} }

snippet     assert_false
alias       asf
options     head
    Assert.Throw(${0});

snippet     assert_not_null
alias       asnn
options     head
    Assert.IsNotNull(${1:"${2\}"});

snippet     assert_throws
alias       asw
options     head
    Assert.Throws<${1}>(delegate { ${0}; });

snippet     assert_is_null
alias       asin
options     head
    Assert.IsNull(${1});

snippet     assert
alias       as
options     head
    Assert.That(${1});

snippet     assert_todo
alias       ast
options     head
    #warning "TODO"
    Assert.Throw("TODO");

snippet     gset
abbr    gset
options     head
    { get; set; }

snippet     assert_fail_todo
alias       asft
options     head
    Assert.Throw("TODO");

snippet     assert_equals
alias       ase
options     head
    Assert.IsEqual(${1}, ${2});

snippet     assert_not_equal
alias       asne
options     head
    Assert.IsNotEqual(${1}, ${2});

snippet     container_bind_factory
alias       sbinf
options     head
    subContainer.BindFactory<${1}>();

snippet     container_bind_single
alias       sbins
options     head
    subContainer.Bind<${1}>().ToSingle();

snippet     container_bind_interface
alias       cbini
options     head
    Container.Bind<${1}>().ToSingle<${2}>();

snippet     container_bind_value
alias       cbinv
options     head
    Container.BindValue<${1}>().To(${2});

snippet     container_bind_all
alias       cbina
options     head
    Container.BindAllInterfacesToSingle<${1}>();

snippet     container_bind_singleton
alias       cbins
options     head
    Container.Bind<${1}>().ToSingle();

snippet     container_bind_installer
alias       cbinr
options     head
    Container.Install<${1}>();

snippet     container_bind_iinitializable
alias       cbinsi
options     head
    Container.Bind<IInitializable>().ToSingle<${0}>();

snippet     container_bind_itickable
alias       cbinst
options     head
    Container.Bind<ITickable>().ToSingle<${0}>();

snippet     container_bind_idisposable
alias       cbinsd
options     head
    Container.Bind<IDisposable>().ToSingle<${0}>();
